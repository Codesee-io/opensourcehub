import { MarkGithubIcon } from "@primer/octicons-react";
import { json, LoaderFunction } from "@remix-run/node";
import { Form, Link, Outlet, useCatch, useLoaderData } from "@remix-run/react";
import { FC } from "react";
import Button from "~/components/Button";
import DiscordIcon from "~/components/icons/DiscordIcon";
import EditIcon from "~/components/icons/EditIcon";
import LinkedInIcon from "~/components/icons/LinkedInIcon";
import TwitterIcon from "~/components/icons/TwitterIcon";
import Interests from "~/components/profile/Interests";
import Tag from "~/components/Tag";
import { getUserProfileBySlug } from "~/database.server";
import { getCurrentUser } from "~/session.server";
import { getProjectByRepoUrl } from "~/projects.server";
import { Project, UserProfile } from "~/types";
import { parseMarkdown } from "~/utils/markdown";
import markdownStyles from "~/styles/markdown.css";

export function links() {
  return [{ rel: "stylesheet", href: markdownStyles }];
}

export type PortfolioItem = {
  id: string;
  title: string;
  description: string;
  pullRequestUrl: string;
  createdAt: string;
  updatedAt: string;
  reviewMapImageUrl?: string;
};

type PortfolioItemWithProject = PortfolioItem & {
  project?: Project;
};

const FAKE_ITEMS: PortfolioItem[] = [
  {
    id: "1",
    title: "Added an intro field to user profiles",
    description: "Users can now introduce themselves on their profile!",
    createdAt: new Date().toISOString(),
    pullRequestUrl: "https://github.com/Codesee-io/opensourcehub/pull/20",
    updatedAt: new Date().toISOString(),
    reviewMapImageUrl:
      "https://s3.us-east-2.amazonaws.com/maps.codesee.io/images/github/Codesee-io/opensourcehub/20/ffd985df/6e2ffb66ef3f5bff61991a83f025f6e3310da9fc.svg",
  },
  {
    id: "2",
    title: "Store tags in user profiles",
    description:
      "The goal of this PR is to allow users to select their interests from the Welcome screen. To accomplish this, I've also:\n- moved the autogenerated files to the `app/data/autogenerated` directory.\n- stored all the tags into files like `app/data/languages.ts`. This allows us to set specific colors for each tag and validate user input.\n- added custom styling for the react-select dropdowns on the Welcome screen\n- audited all the tags and removed/renamed a few to curate the list",
    createdAt: new Date().toISOString(),
    pullRequestUrl: "https://github.com/Codesee-io/opensourcehub/pull/15",
    updatedAt: new Date().toISOString(),
    reviewMapImageUrl:
      "https://s3.us-east-2.amazonaws.com/maps.codesee.io/images/github/Codesee-io/opensourcehub/15/053f0715/daaabe7702bb2ba240eb038678123a11d2e05618.svg",
  },
  {
    id: "3",
    title: "Switch from Gatsby to Remix",
    description:
      "Goodbye Gatsby, hello Remix!\n\nGatsby worked well enough to get us off the ground, but statically-generated data is always out of date. We also want to build some very dynamic features so Remix feels like the right path forward.",
    createdAt: new Date().toISOString(),
    pullRequestUrl: "https://github.com/Codesee-io/oss-port/pull/277",
    updatedAt: new Date().toISOString(),
    reviewMapImageUrl:
      "https://camo.githubusercontent.com/72e9389f5233c9812211f27d91e3854870e64c08e036498e24dd674080b770af/68747470733a2f2f73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f6d6170732e636f64657365652e696f2f696d616765732f6769746875622f436f64657365652d696f2f6f73732d706f72742f3237372f63633539363731352f336438316464666261336239353231623233396262343634373935643234393635363337303863362e737667",
  },
];

export const loader: LoaderFunction = async ({ params, request }) => {
  const slug = params.slug as string; // This can't be undefined or we wouldn't be here

  const user = await getCurrentUser(request);
  const profile = await getUserProfileBySlug(slug);

  if (!profile) {
    throw new Response("Not Found", {
      status: 404,
    });
  }

  const portfolioItems: PortfolioItemWithProject[] = FAKE_ITEMS.map((item) => ({
    ...item,
    description: parseMarkdown(item.description),
    project: getProjectByRepoUrl(item.pullRequestUrl),
  }));

  const payload: LoaderData = {
    profile,
    canEdit: profile.userId === user?.uid,
    hasVerifiedDiscord: typeof user?.discordUserId === "string",
    portfolioItems,
  };

  return json(payload);
};

type LoaderData = {
  profile: UserProfile;
  canEdit: boolean;
  hasVerifiedDiscord: boolean;
  portfolioItems: PortfolioItemWithProject[];
};

export function CatchBoundary() {
  const caught = useCatch();

  if (caught.status === 404) {
    return (
      <main className="max-w-xl mx-auto p-4 py-16">
        <h2 className="font-semibold text-2xl mb-2 text-black-500">
          There is no profile here <span role="img">ðŸ™€</span>
        </h2>
        <p className="text-light-type-medium mb-4">
          Maybe the URL is incorrect or the person you're looking took down
          their profile.
        </p>
        <p>
          <Link
            to="/"
            className="text-light-interactive font-semibold hover:underline"
          >
            Go home
          </Link>
        </p>
      </main>
    );
  }

  return (
    <main className="max-w-xl mx-auto p-4 py-16">
      <h2 className="font-semibold text-2xl mb-2 text-black-500">
        {caught.status} {caught.statusText}
      </h2>
      <p className="text-light-type-medium mb-4">
        Something went terribly wrong
      </p>
      <p>
        <Link
          to="/"
          className="text-light-interactive font-semibold hover:underline"
        >
          Go home
        </Link>
      </p>
    </main>
  );
}

const ProfilePage: FC = () => {
  const { profile, canEdit, hasVerifiedDiscord, portfolioItems } =
    useLoaderData<LoaderData>();

  return (
    <>
      <main className="max-w-6xl mx-auto px-4 py-12">
        <div className="bg-white border border-light-border p-6 rounded-lg">
          <div className="flex gap-6 mb-4 relative">
            <div className="flex-shrink-0">
              {profile.pictureUrl && (
                <img
                  src={profile.pictureUrl}
                  style={{ width: 108, height: 108 }}
                  alt={`${profile.displayName}'s avatar`}
                  className="rounded-full flex-shrink-0"
                />
              )}
              <div className="space-x-2 text-light-interactive font-semibold mt-2">
                {profile.githubUrl && (
                  <a
                    className="inline-flex p-1 text-light-type-medium hover:text-light-interactive"
                    href={profile.githubUrl}
                    title={`Visit ${profile.displayName}'s GitHub profile`}
                    target="_blank"
                    rel="noreferrer"
                  >
                    <MarkGithubIcon size={20} />
                  </a>
                )}
                {profile.twitterUrl && (
                  <a
                    className="inline-flex p-1 text-light-type-medium hover:text-light-interactive"
                    href={profile.twitterUrl}
                    title={`Visit ${profile.displayName}'s Twitter feed`}
                    target="_blank"
                    rel="noreferrer"
                  >
                    <TwitterIcon className="w-5 h-5" />
                  </a>
                )}
                {profile.linkedinUrl && (
                  <a
                    className="inline-flex p-1 text-light-type-medium hover:text-light-interactive"
                    href={profile.linkedinUrl}
                    title={`Visit ${profile.displayName}'s LinkedIn profile`}
                    target="_blank"
                    rel="noreferrer"
                  >
                    <LinkedInIcon className="w-5 h-5" />
                  </a>
                )}
              </div>
            </div>
            <div>
              <h1 className="text-4xl text-light-type font-semibold mb-4">
                {profile.displayName}
                {canEdit && hasVerifiedDiscord && (
                  <span
                    title="You've verified your Discord account"
                    className="ml-4 inline-block p-1 rounded-full bg-discord-blurple text-white text-xs"
                  >
                    <DiscordIcon className="w-3 h-3" />
                  </span>
                )}
              </h1>
              {profile.intro && (
                <p className="text-sm text-light-type-medium max-w-2xl whitespace-pre-line">
                  {profile.intro}
                </p>
              )}
              {canEdit && !profile.intro && (
                <p className="text-sm">
                  Why not{" "}
                  <Link
                    to="edit"
                    className="text-light-interactive hover:underline font-semibold"
                  >
                    introduce yourself
                  </Link>{" "}
                  on your profile?
                </p>
              )}
            </div>

            {canEdit && (
              <Link
                to="edit"
                title="Edit your profile"
                className="absolute p-1 -top-1 -right-1 rounded hover:text-light-interactive"
              >
                <EditIcon />
              </Link>
            )}
          </div>
          <Interests {...profile} />
          {canEdit && !hasVerifiedDiscord && (
            <Form action="/api/discord-auth-url" method="post" className="mt-6">
              <Button type="submit">Verify on Discord</Button>
            </Form>
          )}
        </div>
        <section className="mx-auto max-w-6xl my-6">
          <h2 className="text-light-type font-xl font-semibold mb-4">
            Portfolio
          </h2>
          <div className="flex gap-4">
            {portfolioItems.map((item) => (
              <div
                className="bg-white rounded-lg border border-light-border max-w-sm"
                key={item.id}
              >
                <h3 className="px-4 mt-4 mb-2">
                  <a
                    href={item.pullRequestUrl}
                    target="_blank"
                    rel="noreferrer"
                    className="text-light-interactive supports-hover:hover:underline text-lg font-medium"
                  >
                    {item.title}
                  </a>
                </h3>
                <div
                  className="px-4 markdown-content"
                  dangerouslySetInnerHTML={{ __html: item.description }}
                />
                {item.reviewMapImageUrl && (
                  <img
                    src={item.reviewMapImageUrl}
                    alt=""
                    className="mt-4 w-full object-cover border-t border-light-border"
                    style={{ height: 200 }}
                  />
                )}
                {item.project ? (
                  <p className="pt-4 px-4 pb-4 border-t border-light-border">
                    <div className="flex gap-4 items-center">
                      {item.project.attributes.avatar && (
                        <img
                          src={item.project.attributes.avatar}
                          className="rounded-full"
                          style={{ width: 40, height: 40 }}
                          alt=""
                        />
                      )}
                      <Link
                        to={"/" + item.project.slug}
                        className="text-light-interactive text-xl supports-hover:hover:underline"
                      >
                        {item.project.attributes.name}
                      </Link>
                    </div>
                    {item.project.attributes.description && (
                      <p
                        className="text-sm text-light-type mt-2 overflow-hidden"
                        style={{
                          lineClamp: 3,
                          WebkitLineClamp: 3,
                          WebkitBoxOrient: "vertical",
                          display: "-webkit-box",
                          height: 60,
                          maxHeight: 60,
                          lineHeight: "20px",
                        }}
                      >
                        {item.project.attributes.description}
                      </p>
                    )}
                    <div className="border-t border-light-border pt-4">
                      <div>
                        <span className="uppercase text-light-type-medium text-xs mr-6">
                          Project type
                        </span>
                        {item.project.attributes.tags?.map((badge) => (
                          <Tag tag={badge} key={badge} className="mr-2 mb-2" />
                        ))}
                      </div>
                      <div>
                        <span className="uppercase text-light-type-medium text-xs mr-6">
                          Tech
                        </span>
                        {item.project.attributes.languages?.map((badge) => (
                          <Tag tag={badge} key={badge} className="mr-2 mb-2" />
                        ))}
                      </div>
                    </div>
                  </p>
                ) : (
                  <p className="pt-4 px-4 pb-4 border-t border-light-border text-light-type-medium text-sm">
                    This project is not on Open-Source Hub.
                  </p>
                )}
              </div>
            ))}
          </div>
        </section>
      </main>
      <Outlet />
    </>
  );
};

export default ProfilePage;
