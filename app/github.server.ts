import { graphql } from "@octokit/graphql";
import type { graphql as GraphQLType } from "@octokit/graphql/dist-types/types";
import githubData from "./data/autogenerated/github.json";
import type { GitHubData, PullRequestDetails } from "./types";

export function getGitHubData() {
  return githubData as { [key: string]: GitHubData };
}

export function getGitHubDataForProject(slug: string) {
  return getGitHubData()[slug] || undefined;
}

let graphqlAPI: GraphQLType;

function getGithubAPI() {
  if (!process.env.GITHUB_PERSONAL_ACCESS_TOKEN) {
    throw new Error("Missing GITHUB_PERSONAL_ACCESS_TOKEN");
  }

  if (!graphqlAPI) {
    graphqlAPI = graphql.defaults({
      headers: {
        authorization: `token ${process.env.GITHUB_PERSONAL_ACCESS_TOKEN}`,
      },
    });
  }

  return graphqlAPI;
}

export async function getPullRequestInfo(
  repoOwner: string,
  repoName: string,
  pullRequestNumber: string
) {
  type ReturnValue = {
    repository: {
      pullRequest: PullRequestDetails;
    };
  };

  const value = await getGithubAPI()<ReturnValue>(
    `
    query pullRequestDetails($owner: String!, $name: String!, $pullRequestNumber: Int!) {
      repository(name: $name, owner: $owner) {
        pullRequest(number: $pullRequestNumber) {
          author {
            login
            url
          }
          url
          number
          merged
          title
          participants(first:100) {
            nodes {
              login
            }
          }
          repository {
            nameWithOwner
            url
          }
        }
      }
    }
  `,
    {
      owner: repoOwner,
      name: repoName,
      pullRequestNumber: parseInt(pullRequestNumber, 10),
    }
  );

  return value.repository.pullRequest;
}
